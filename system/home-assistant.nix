{ pkgs, config, ... }:

let
  home-assistant-dir = if config.networking.hostName == "pascal" then "/data/home-assistant" else "/home/juniper/home-assistant";
in
{
  virtualisation.oci-containers.containers.home-assistant = {
    volumes = [ "${home-assistant-dir}:/config" ];
    environment.TZ = "Europe/Berlin";
    image = "ghcr.io/home-assistant/home-assistant:2023.6";
    extraOptions = [
      "--network=host"
    ];
  };

  networking.firewall.allowedTCPPorts = [
    8123 # Home assistant web UI
    1883 # Mosquitto
  ];

  environment.systemPackages = with pkgs; [
    sqlite-interactive
    # For testing with mosquitto_pub and for generating password files with mosquitto_passwd
    mosquitto
  ];

  services.mosquitto = {
    enable = true;
    logType = [ "all" ];
    listeners = [
      {
        port = 1883;
        users = {
          esp-water-meter = {
            # Hashes generated by using mosquitto_passwd and extracting the second field
            # See NixOS options doc
            hashedPassword = "$7$101$39mT4ByzZgkt+V5h$0icwVVmOgazrzz11AqXC1v2xhWd08/PzMRzbYjNLK2Hv85LI4qb7thFm/rqwdBGGHUY5MAijHkLnUZDsueM+dw==";
            acl = [
              "readwrite watermeter/#"
              "readwrite homeassistant/sensor/watermeter/#"
            ];
          };
          ha_user = {
            hashedPassword = "$7$101$eB9lWqPtXfPbUaaj$bgM475TrtqBhCJBCvdxs/SSUWme2W17qTQGxhRnJkyzRRSjH0vCLP7P0aucV6SHUO68N/L9veEVI/mO7k8WKtQ==";
            acl = [
              "read #"
              "readwrite homeassistant/#"
            ];
          };
        };
      }
    ];
  };

  systemd.services.home-assistant-backup = {
    description = "Backup service for HA";
    after = [ "network.target" ];
    script = ''
      #!/usr/bin/env bash

      set -euo pipefail

      readonly SOURCE_DIR="${home-assistant-dir}/backups"
      readonly BACKUP_DIR="/backup/home-assistant"
      readonly DATETIME="$(date '+%Y-%m-%d_%H:%M:%S')"
      readonly BACKUP_PATH="''${BACKUP_DIR}/''${DATETIME}"
      readonly LATEST_LINK="''${BACKUP_DIR}/latest"

      mkdir -p "''${BACKUP_DIR}"

      # --dry-run
      ${pkgs.rsync}/bin/rsync --verbose --archive \
        "''${SOURCE_DIR}/" \
        --link-dest "''${LATEST_LINK}" \
        "''${BACKUP_PATH}"

      rm -rf "''${LATEST_LINK}"
      ln -s "''${BACKUP_PATH}" "''${LATEST_LINK}"
    '';
    serviceConfig = {
      Type = "oneshot";
    };
  };

  systemd.timers.home-assistant-backup-timer = {
    description = "Backup timer for HA backup";
    partOf = [ "home-assistant-backup.service" ];
    wantedBy = [ "timers.target" ];
    # Home Assistant backup runs at 3:00
    timerConfig = {
      OnCalendar = "*-*-* 03:30:00";
      # Launch the service even if the system was turned off last time the timer triggered
      Persistent = true;
      Unit = "home-assistant-backup.service";
    };
  };
}
